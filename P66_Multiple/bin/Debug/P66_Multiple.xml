<?xml version="1.0"?>
<doc>
<assembly>
<name>
P66_Multiple
</name>
</assembly>
<members>
<member name="T:P66_Multiple.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:P66_Multiple.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:P66_Multiple.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:P66_Multiple.My.Resources.Resources.icon">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="P:P66_Multiple.My.Resources.Resources.pwimg">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="M:P66_Multiple.Transducer.DisplayRdy">
 <summary>
 This function checks to make sure all the information has been gathered and results in a boolean.
 </summary>
 <returns>A Boolean - True = has all values and is ready to be displayed or false = it is not ready to be displayed.</returns>
</member>
<member name="M:P66_Multiple.Form1.Form1_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 Closing Form book keeping.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:P66_Multiple.Form1.SerialNumber0_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 Adding Event Listeners to all serialNumber Textboxes.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:P66_Multiple.Form1.InitCanbus">
 <summary>
 This sub procedure initializes the PEAKVIEW CANBUS Device.
 </summary>
</member>
<member name="M:P66_Multiple.Form1.ResetCanbus">
 <summary>
 This sub procedure is used to reset the CANBUS device if it's buffer is erroring.
 </summary>
</member>
<member name="F:P66_Multiple.Form1.m_PcanHandle">
 <summary>
 Saves the handle Of a PCAN hardware
 </summary>
</member>
<member name="F:P66_Multiple.Form1.m_Baudrate">
 <summary>
 Saves the baudrate register for a conenction
 </summary>
</member>
<member name="F:P66_Multiple.Form1.m_HwType">
 <summary>
 Saves the type of a non-plug-and-play hardware
 </summary>
</member>
<member name="F:P66_Multiple.Form1.m_HandlesArray">
 <summary>
 Handles of the current available PCAN-Hardware
 </summary>
</member>
<member name="F:P66_Multiple.Form1.m_ReadDelegate">
 <summary>
 Read Delegate For calling the Function "ReadMessages"
 </summary>
</member>
<member name="F:P66_Multiple.Form1.m_ReceiveEvent">
 <summary>
 Receive-Event
 </summary>
</member>
<member name="F:P66_Multiple.Form1.m_ReadThread">
 <summary>
 Thread For message reading (Using events)
 </summary>
</member>
<member name="T:P66_Multiple.Form1.ReadDelegateHandler">
 <summary>
 Read-Delegate Handler
 </summary>
</member>
<member name="M:P66_Multiple.Form1.NewConnection(System.Int32)">
 <summary>
 This sub procedure sends transducer commands H,C,X,O,A,Q,E - see P66 protocols for more information.
 </summary>
 <param name="unit">The unit number as an integer 0 to 11</param>
</member>
<member name="M:P66_Multiple.Form1.CanbusConnect(System.Int32)">
 <summary>
 This function is used to compute the correct NetID for 1 to 1 communications.
 </summary>
 <param name="sn">The serial number of the transducer as an Integer.</param>
 <returns></returns>
</member>
<member name="M:P66_Multiple.Form1.WriteToCanbus(System.String,System.Int32,System.String,System.String)">
 <summary>
 This sub procedure constructs the CANBUS data packet by transducer command.
 </summary>
 <param name="cmd">Transducer command as String</param>
 <param name="unit">Unit number as Integer</param>
 <param name="NetID">NetID is optional As String</param>
 <param name="value">Value is optional as String</param>
</member>
<member name="M:P66_Multiple.Form1.CreatePacket(System.String,System.Int32,System.String)">
 <summary>
 This function creates the Packet for sending to the P66 Transducer.
 </summary>
 <param name="cmd">P66 command that is being sent.</param>
 <param name="len">Length of the packet being sent.</param>
 <param name="value">Value is optional if the Moving average, sample frequency, or output period is being changed.</param>
 <returns>The return value is a Byte Array of the Hex value of the cmd and its values.</returns>
</member>
<member name="M:P66_Multiple.Form1.SendPacket(System.Byte[],System.Int32,System.String,System.Int32)">
 <summary>
 This sub procedure sends the created byte package through the CANBUS to the Transducer.
 </summary>
 <param name="packet">Byte array package</param>
 <param name="len">Length of the Byte array</param>
 <param name="NetID">The ID of the device we are communcating with over the CANBUS device.</param>
 <param name="unit">This is the Transducer unit number 0-11.</param>
</member>
<member name="M:P66_Multiple.Form1.ProcessMessage(System.Collections.Generic.List{System.Byte[]},System.Int32)">
 <summary>
 This sub procedure pharses the return message from the transducer.
 </summary>
 <param name="readBuffer">This is the buffer as a List of Byte Arrays from the CANBUS device.</param>
 <param name="unit">Transducer's unit number 0-11</param>
</member>
<member name="M:P66_Multiple.Form1.UpdateTransducers(System.Char,System.String,System.Int32)">
 <summary>
 This sub procedure updates the Transducer object array called Transducers with the pharsed values from the ProcessMessage Sub procedure.
 The calls are responses from the tranducer and read from the CANBUS device.
 </summary>
 <param name="cmd">Command that was send As Char</param>
 <param name="value">Value that was returned from the transducer</param>
 <param name="unit">This is the unit number that has returned a response</param>
</member>
<member name="M:P66_Multiple.Form1.UpdateGUI">
 <summary>
 This sub procedure updates the Main Thread GUI in real time. Each transducer object is checked and will only display if
 all the values are obtained.
 </summary>
</member>
<member name="M:P66_Multiple.Form1.LeadingZero(System.String)">
 <summary>
 This function is a helper function that adds LeadingZeros to a String Hex value that is missing said zeros.
 </summary>
 <param name="value">The value in Hex that may need a leading zero.</param>
 <returns>Returns a String representing a proper Hex value with leading zeros.</returns>
</member>
<member name="M:P66_Multiple.Form1.ConvertTohex(System.String)">
 <summary>
 This function is a helper function the convery a Hex string to a string of bytes.
 </summary>
 <param name="comd">Hex string</param>
 <returns>A Hex to byte string representation.</returns>
</member>
<member name="M:P66_Multiple.Form1.ConvertToByteArray(System.String,System.Int32)">
 <summary>
 This helper function converts a string into a byte array.
 </summary>
 <param name="value">Hex value string representation</param>
 <param name="len">Length of the string</param>
 <returns>A Byte array representing a Hex value formally in a String format</returns>
</member>
<member name="M:P66_Multiple.Form1.Button1_Click(System.Object,System.EventArgs)">
 <summary>
 This sub procedure is the Apply All button that writes any filled valid value to the Transducer through the CANBUS channel.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:P66_Multiple.Form1.DisabledPanels">
 <summary>
 This sub procedure disables all GUI panel and button elements.
 </summary>
</member>
<member name="M:P66_Multiple.Form1.EnablePanels">
 <summary>
 This sub procedure enables all GUI panel and button elements.
 </summary>
</member>
<member name="M:P66_Multiple.Form1.FindUnitNumber(System.String)">
 <summary>
 This function finds the unit number or index of the Transducer object in the transducer array that matches a serial number.
 </summary>
 <param name="sn">Transducer serial number.</param>
 <returns>Unit Number As Integer</returns>
</member>
<member name="M:P66_Multiple.Form1.UnitExist(System.String)">
 <summary>
 This function is in development. It checks the transducers array for a matching serial number and sends a boolean result back.
 </summary>
 <param name="sn">Serial number of the unit in question as a String</param>
 <returns>Returns a Boolean value. Yes if the sn already exists and no if it is a new serial number found.</returns>
</member>
<member name="M:P66_Multiple.Form1.ConnectUnit(System.String)">
 <summary>
 This is in development. This function will automatically connect to the transducer in an
 effort to auto sense Transducers connected to the CANBUS channel.
 </summary>
 <param name="sn">Units serial number as a String</param>
</member>
<member name="M:P66_Multiple.Form1.ShowPanel(System.Int32)">
 <summary>
 This sub procedure shows the a panel number and changes the cursor focus.
 </summary>
 <param name="panelNum">Panel Number as an Integer</param>
</member>
<member name="M:P66_Multiple.Form1.DoesUnitExist(System.String)">
 <summary>
 This is another function that checks to see if a unit exists already in the Tranducer object array called transducers.
 </summary>
 <param name="sn">Serial Number of the unit in question as a String</param>
 <returns>Returns a Boolean - True = it exists in the Transducers array or 
 False = it does not exist in the Transducers array.</returns>
</member>
<member name="M:P66_Multiple.Form1.GetSerialNumber(System.UInt32)">
 <summary>
 This function converts the NetID to a serial number.
 </summary>
 <param name="netID">The NetID as a UInteger</param>
 <returns>The serial number of the unit that is transmitting information as a String.</returns>
</member>
<member name="M:P66_Multiple.Form1.GetSampleFrequency(System.Int32)">
 <summary>
 This function gets the Sample Frequency value by index number.
 </summary>
 <param name="index">The index of the value that the user would like to set for the Transducer's sample frequency.</param>
 <returns>Value as String</returns>
</member>
<member name="M:P66_Multiple.Form1.ReadMessages(System.Int32)">
 <summary>
 This Sub procedure is a delegate function that Reads Messages from the CANBUS channel everytime a message is in the buffer.
 </summary>
 <param name="ReadLen">Is an optional value if the message contains a value other than a command.</param>
</member>
<member name="M:P66_Multiple.Form1.CANReadThreadFunc">
 <summary>
 This sub procedure pools the CANBU buffer for receiving events.
 </summary>
</member>
<member name="T:P66_Multiple.Peak.Can.Basic.TPCANStatus">
 <summary>
 Represents a PCAN status/error code
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_OK">
 <summary>
 No error
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_XMTFULL">
 <summary>
 Transmit buffer in CAN controller is full
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_OVERRUN">
 <summary>
 CAN controller was read too late
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_BUSLIGHT">
 <summary>
 Bus error: an error counter reached the 'light' limit
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_BUSHEAVY">
 <summary>
 Bus error: an error counter reached the 'heavy' limit
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_BUSOFF">
 <summary>
 Bus error: the CAN controller is in bus-off state
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_ANYBUSERR">
 <summary>
 Mask for all bus errors
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_QRCVEMPTY">
 <summary>
 Receive queue is empty
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_QOVERRUN">
 <summary>
 Receive queue was read too late
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_QXMTFULL">
 <summary>
 Transmit queue is full
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_REGTEST">
 <summary>
 Test of the CAN controller hardware registers failed (no hardware found)
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_NODRIVER">
 <summary>
 Driver not loaded
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_HWINUSE">
 <summary>
 Hardware already in use by a Net
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_NETINUSE">
 <summary>
 A Client is already connected to the Net
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_ILLHW">
 <summary>
 Hardware handle is invalid
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_ILLNET">
 <summary>
 Net handle is invalid
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_ILLCLIENT">
 <summary>
 Client handle is invalid
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_ILLHANDLE">
 <summary>
 Mask for all handle errors
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_RESOURCE">
 <summary>
 Resource (FIFO, Client, timeout) cannot be created
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_ILLPARAMTYPE">
 <summary>
 Invalid parameter
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_ILLPARAMVAL">
 <summary>
 Invalid parameter value
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_UNKNOWN">
 <summary>
 Unknow error
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANStatus.PCAN_ERROR_INITIALIZE">
 <summary>
 Channel is not initialized
 </summary>
</member>
<member name="T:P66_Multiple.Peak.Can.Basic.TPCANDevice">
 <summary>
 Represents a PCAN device
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANDevice.PCAN_NONE">
 <summary>
 Undefined, unknown or not selected PCAN device value
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANDevice.PCAN_PEAKCAN">
 <summary>
 PCAN Non-Plug And Play devices. NOT USED WITHIN PCAN-Basic API
 </summary>        
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANDevice.PCAN_ISA">
 <summary>
 PCAN-ISA, PCAN-PC/104, and PCAN-PC/104-Plus
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANDevice.PCAN_DNG">
 <summary>
 PCAN-Dongle
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANDevice.PCAN_PCI">
 <summary>
 PCAN-PCI, PCAN-cPCI, PCAN-miniPCI, and PCAN-PCI Express
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANDevice.PCAN_USB">
 <summary>
 PCAN-USB and PCAN-USB Pro
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANDevice.PCAN_PCC">
 <summary>
 PCAN-PC Card
 </summary>
</member>
<member name="T:P66_Multiple.Peak.Can.Basic.TPCANParameter">
 <summary>
 Represents a PCAN parameter to be read or set
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_DEVICE_NUMBER">
 <summary>
 PCAN-USB device number parameter
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_5VOLTS_POWER">
 <summary>
 PCAN-PC Card 5-Volt power parameter
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_RECEIVE_EVENT">
 <summary>
 PCAN receive event handler parameter
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_MESSAGE_FILTER">
 <summary>
 PCAN message filter parameter
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_API_VERSION">
 <summary>
 PCAN-Basic API version parameter
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_CHANNEL_VERSION">
 <summary>
 PCAN device channel version parameter
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_BUSOFF_AUTORESET">
 <summary>
 PCAN Reset-On-Busoff parameter
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_LISTEN_ONLY">
 <summary>
 PCAN Listen-Only parameter
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_LOG_LOCATION">
 <summary>
 Directory path for trace files
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_LOG_STATUS">
 <summary>
 Debug-Trace activation status
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_LOG_CONFIGURE">
 <summary>
 Configuration of the debugged information (LOG_FUNCTION_***)
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_LOG_TEXT">
 <summary>
 Custom insertion of text into the log file
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_CHANNEL_CONDITION">
 <summary>
 Availability status of a PCAN-Channel
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANParameter.PCAN_HARDWARE_NAME">
 <summary>
 PCAN hardware name parameter
 </summary>
</member>
<member name="T:P66_Multiple.Peak.Can.Basic.TPCANMessageType">
 <summary>
 Represents the type of a PCAN message
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANMessageType.PCAN_MESSAGE_STANDARD">
 <summary>
 The PCAN message is a CAN Standard Frame (11-bit identifier)
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANMessageType.PCAN_MESSAGE_RTR">
 <summary>
 The PCAN message is a CAN Remote-Transfer-Request Frame
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANMessageType.PCAN_MESSAGE_EXTENDED">
 <summary>
 The PCAN message is a CAN Extended Frame (29-bit identifier)
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANMessageType.PCAN_MESSAGE_STATUS">
 <summary>
 The PCAN message represents a PCAN status message
 </summary>
</member>
<member name="T:P66_Multiple.Peak.Can.Basic.TPCANMode">
 <summary>
 Represents a PCAN filter mode
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANMode.PCAN_MODE_STANDARD">
 <summary>
 Mode is Standard (11-bit identifier)
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANMode.PCAN_MODE_EXTENDED">
 <summary>
 Mode is Extended (29-bit identifier)
 </summary>
</member>
<member name="T:P66_Multiple.Peak.Can.Basic.TPCANBaudrate">
 <summary>
 Represents a PCAN Baud rate register value
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_1M">
 <summary>
 1 MBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_800K">
 <summary>
 800 kBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_500K">
 <summary>
 500 kBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_250K">
 <summary>
 250 kBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_125K">
 <summary>
 125 kBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_100K">
 <summary>
 100 kBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_95K">
 <summary>
 95,238 kBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_83K">
 <summary>
 83,333 kBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_50K">
 <summary>
 50 kBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_47K">
 <summary>
 47,619 kBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_33K">
 <summary>
 33,333 kBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_20K">
 <summary>
 20 kBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_10K">
 <summary>
 10 kBit/s
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANBaudrate.PCAN_BAUD_5K">
 <summary>
 5 kBit/s
 </summary>
</member>
<member name="T:P66_Multiple.Peak.Can.Basic.TPCANType">
 <summary>
 Represents the type of PCAN (non plug and play) hardware to be initialized
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANType.PCAN_TYPE_ISA">
 <summary>
 PCAN-ISA 82C200
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANType.PCAN_TYPE_ISA_SJA">
 <summary>
 PCAN-ISA SJA1000
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANType.PCAN_TYPE_ISA_PHYTEC">
 <summary>
 PHYTEC ISA 
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANType.PCAN_TYPE_DNG">
 <summary>
 PCAN-Dongle 82C200
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANType.PCAN_TYPE_DNG_EPP">
 <summary>
 PCAN-Dongle EPP 82C200
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANType.PCAN_TYPE_DNG_SJA">
 <summary>
 PCAN-Dongle SJA1000
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANType.PCAN_TYPE_DNG_SJA_EPP">
 <summary>
 PCAN-Dongle EPP SJA1000
 </summary>
</member>
<member name="T:P66_Multiple.Peak.Can.Basic.TPCANMsg">
 <summary>
 Represents a PCAN message
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANMsg.ID">
 <summary>
 11/29-bit message identifier
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANMsg.MSGTYPE">
 <summary>
 Type of the message
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANMsg.LEN">
 <summary>
 Data Length Code of the message (0..8)
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANMsg.DATA">
 <summary>
 Data of the message (DATA[0]..DATA[7])
 </summary>
</member>
<member name="T:P66_Multiple.Peak.Can.Basic.TPCANTimestamp">
 <summary>
 Represents a timestamp of a received PCAN message.
 Total Microseconds = micros + 1000 * millis + 0xFFFFFFFF * 1000 * millis_overflow
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANTimestamp.millis">
 <summary>
 Base-value: milliseconds: 0.. 2^32-1
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANTimestamp.millis_overflow">
 <summary>
 Roll-arounds of millis
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.TPCANTimestamp.micros">
 <summary>
 Microseconds: 0..999
 </summary>
</member>
<member name="T:P66_Multiple.Peak.Can.Basic.PCANBasic">
 <summary>
 PCAN-Basic API class implementation
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_NONEBUS">
 <summary>
 Undefined/default value for a PCAN bus
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_ISABUS1">
 <summary>
 PCAN-ISA interface, channel 1
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_ISABUS2">
 <summary>
 PCAN-ISA interface, channel 2
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_ISABUS3">
 <summary>
 PCAN-ISA interface, channel 3
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_ISABUS4">
 <summary>
 PCAN-ISA interface, channel 4
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_ISABUS5">
 <summary>
 PCAN-ISA interface, channel 5
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_ISABUS6">
 <summary>
 PCAN-ISA interface, channel 6
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_ISABUS7">
 <summary>
 PCAN-ISA interface, channel 7
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_ISABUS8">
 <summary>
 PCAN-ISA interface, channel 8
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_DNGBUS1">
 <summary>
 PPCAN-Dongle/LPT interface, channel 1 
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_PCIBUS1">
 <summary>
 PCAN-PCI interface, channel 1
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_PCIBUS2">
 <summary>
 PCAN-PCI interface, channel 2
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_PCIBUS3">
 <summary>
 PCAN-PCI interface, channel 3
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_PCIBUS4">
 <summary>
 PCAN-PCI interface, channel 4
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_PCIBUS5">
 <summary>
 PCAN-PCI interface, channel 5
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_PCIBUS6">
 <summary>
 PCAN-PCI interface, channel 6
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_PCIBUS7">
 <summary>
 PCAN-PCI interface, channel 7
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_PCIBUS8">
 <summary>
 PCAN-PCI interface, channel 8
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_USBBUS1">
 <summary>
 PCAN-USB interface, channel 1
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_USBBUS2">
 <summary>
 PCAN-USB interface, channel 2
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_USBBUS3">
 <summary>
 PCAN-USB interface, channel 3
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_USBBUS4">
 <summary>
 PCAN-USB interface, channel 4
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_USBBUS5">
 <summary>
 PCAN-USB interface, channel 5
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_USBBUS6">
 <summary>
 PCAN-USB interface, channel 6
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_USBBUS7">
 <summary>
 PCAN-USB interface, channel 7
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_USBBUS8">
 <summary>
 PCAN-USB interface, channel 8
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_PCCBUS1">
 <summary>
 PCAN-PC Card interface, channel 1
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_PCCBUS2">
 <summary>
 PCAN-PC Card interface, channel 2
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_PARAMETER_OFF">
 <summary>
 The PCAN parameter is not set (inactive)
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_PARAMETER_ON">
 <summary>
 The PCAN parameter is set (active)
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_FILTER_CLOSE">
 <summary>
 The PCAN filter is closed. No messages will be received
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_FILTER_OPEN">
 <summary>
 The PCAN filter is fully opened. All messages will be received
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_FILTER_CUSTOM">
 <summary>
 The PCAN filter is custom configured. Only registered 
 messages will be received
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_CHANNEL_UNAVAILABLE">
 <summary>
 The PCAN-Channel handle is illegal, or its associated hadware is not available
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_CHANNEL_AVAILABLE">
 <summary>
 The PCAN-Channel handle is available to be connected (Plug and Play Hardware: it means futhermore that the hardware is plugged-in)
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.PCAN_CHANNEL_OCCUPIED">
 <summary>
 The PCAN-Channel handle is valid, and is already being used
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.LOG_FUNCTION_DEFAULT">
 <summary>
 Logs system exceptions / errors
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.LOG_FUNCTION_ENTRY">
 <summary>
 Logs the entries to the PCAN-Basic API functions 
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.LOG_FUNCTION_PARAMETERS">
 <summary>
 Logs the parameters passed to the PCAN-Basic API functions 
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.LOG_FUNCTION_LEAVE">
 <summary>
 Logs the exits from the PCAN-Basic API functions 
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.LOG_FUNCTION_WRITE">
 <summary>
 Logs the CAN messages passed to the CAN_Write function
 </summary>
</member>
<member name="F:P66_Multiple.Peak.Can.Basic.PCANBasic.LOG_FUNCTION_READ">
 <summary>
 Logs the CAN messages received within the CAN_Read function
 </summary>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.Initialize(System.Byte,P66_Multiple.Peak.Can.Basic.TPCANBaudrate,P66_Multiple.Peak.Can.Basic.TPCANType,System.UInt32,System.UInt16)">
 <summary>
 Initializes a PCAN Channel 
 </summary>
 <param name="Channel">The handle of a PCAN Channel</param>
 <param name="Btr0Btr1">The speed for the communication (BTR0BTR1 code)</param>
 <param name="HwType">NON PLUG AND PLAY: The type of hardware and operation mode</param>
 <param name="IOPort">NON PLUG AND PLAY: The I/O address for the parallel port</param>
 <param name="Interrupt">NON PLUG AND PLAY: Interrupt number of the parallel por</param>
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.Initialize(System.Byte,P66_Multiple.Peak.Can.Basic.TPCANBaudrate)">
 <summary>
 Initializes a PCAN Channel
 </summary>
 <param name="Channel">The handle of a PCAN Channel</param>
 <param name="Btr0Btr1">The speed for the communication (BTR0BTR1 code)</param>
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.Uninitialize(System.Byte)">
 <summary>
 Uninitializes one or all PCAN Channels initialized by CAN_Initialize
 </summary>
 <remarks>Giving the TPCANHandle value "PCAN_NONEBUS", 
 uninitialize all initialized channels</remarks>
 <param name="Channel">The handle of a PCAN Channel</param>
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.Reset(System.Byte)">
 <summary>
 Resets the receive and transmit queues of the PCAN Channel
 </summary>
 <remarks>A reset of the CAN controller is not performed</remarks>
 <param name="Channel">The handle of a PCAN Channel</param>
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.GetStatus(System.Byte)">
 <summary>
 Gets the current status of a PCAN Channel
 </summary>
 <param name="Channel">The handle of a PCAN Channel</param>
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.Read(System.Byte,P66_Multiple.Peak.Can.Basic.TPCANMsg@,P66_Multiple.Peak.Can.Basic.TPCANTimestamp@)">
 <summary>
 Reads a CAN message from the receive queue of a PCAN Channel
 </summary>
 <param name="Channel">The handle of a PCAN Channel</param>
 <param name="MessageBuffer">A TPCANMsg structure buffer to store the CAN message</param>
 <param name="TimestampBuffer">A TPCANTimestamp structure buffer to get
 the reception time of the message</param>
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.Read(System.Byte,P66_Multiple.Peak.Can.Basic.TPCANMsg@)">
 <summary>
 Reads a CAN message from the receive queue of a PCAN Channel
 </summary>
 <param name="Channel">The handle of a PCAN Channel</param>
 <param name="MessageBuffer">A TPCANMsg structure buffer to store the CAN message</param>        
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.Write(System.Byte,P66_Multiple.Peak.Can.Basic.TPCANMsg@)">
 <summary>
  Transmits a CAN message 
 </summary>
 <param name="Channel">The handle of a PCAN Channel</param>
 <param name="MessageBuffer">A TPCANMsg buffer with the message to be sent</param>
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.FilterMessages(System.Byte,System.UInt32,System.UInt32,P66_Multiple.Peak.Can.Basic.TPCANMode)">
 <summary>
 Configures the reception filter
 </summary>
 <remarks>The message filter will be expanded with every call to 
 this function. If it is desired to reset the filter, please use
 the 'SetValue' function</remarks>
 <param name="Channel">The handle of a PCAN Channel</param>
 <param name="FromID">The lowest CAN ID to be received</param>
 <param name="ToID">The highest CAN ID to be received</param>
 <param name="Mode">Message type, Standard (11-bit identifier) or
 Extended (29-bit identifier)</param>
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.GetValue(System.Byte,P66_Multiple.Peak.Can.Basic.TPCANParameter,System.Text.StringBuilder,System.UInt32)">
 <summary>
 Retrieves a PCAN Channel value
 </summary>
 <remarks>Parameters can be present or not according with the kind 
 of Hardware (PCAN Channel) being used. If a parameter is not available,
 a PCAN_ERROR_ILLPARAMTYPE error will be returned</remarks>
 <param name="Channel">The handle of a PCAN Channel</param>
 <param name="Parameter">The TPCANParameter parameter to get</param>
 <param name="StringBuffer">Buffer for the parameter value</param>
 <param name="BufferLength">Size in bytes of the buffer</param>
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.GetValue(System.Byte,P66_Multiple.Peak.Can.Basic.TPCANParameter,System.UInt32@,System.UInt32)">
 <summary>
 Retrieves a PCAN Channel value
 </summary>
 <remarks>Parameters can be present or not according with the kind 
 of Hardware (PCAN Channel) being used. If a parameter is not available,
 a PCAN_ERROR_ILLPARAMTYPE error will be returned</remarks>
 <param name="Channel">The handle of a PCAN Channel</param>
 <param name="Parameter">The TPCANParameter parameter to get</param>
 <param name="NumericBuffer">Buffer for the parameter value</param>
 <param name="BufferLength">Size in bytes of the buffer</param>
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.SetValue(System.Byte,P66_Multiple.Peak.Can.Basic.TPCANParameter,System.UInt32@,System.UInt32)">
 <summary>
 Configures or sets a PCAN Channel value 
 </summary>
 <remarks>Parameters can be present or not according with the kind 
 of Hardware (PCAN Channel) being used. If a parameter is not available,
 a PCAN_ERROR_ILLPARAMTYPE error will be returned</remarks>
 <param name="Channel">The handle of a PCAN Channel</param>
 <param name="Parameter">The TPCANParameter parameter to set</param>
 <param name="NumericBuffer">Buffer with the value to be set</param>
 <param name="BufferLength">Size in bytes of the buffer</param>
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.SetValue(System.Byte,P66_Multiple.Peak.Can.Basic.TPCANParameter,System.String,System.UInt32)">
 <summary>
 Configures or sets a PCAN Channel value 
 </summary>
 <remarks>Parameters can be present or not according with the kind 
 of Hardware (PCAN Channel) being used. If a parameter is not available,
 a PCAN_ERROR_ILLPARAMTYPE error will be returned</remarks>
 <param name="Channel">The handle of a PCAN Channel</param>
 <param name="Parameter"></param>
 <param name="StringBuffer">Buffer with the value to be set</param>
 <param name="BufferLength">Size in bytes of the buffer</param>
 <returns>A TPCANStatus error code</returns>
</member>
<member name="M:P66_Multiple.Peak.Can.Basic.PCANBasic.GetErrorText(P66_Multiple.Peak.Can.Basic.TPCANStatus,System.UInt16,System.Text.StringBuilder)">
 <summary>
 Returns a descriptive text of a given TPCANStatus error 
 code, in any desired language
 </summary>
 <remarks>The current languages available for translation are: 
 Neutral (0x00), German (0x07), English (0x09), Spanish (0x0A),
 Italian (0x10) and French (0x0C)</remarks>
 <param name="anError">A TPCANStatus error code</param>
 <param name="Language">Indicates a 'Primary language ID'</param>
 <param name="StringBuffer">Buffer for the text (must be at least 256 in length)</param>
 <returns>A TPCANStatus error code</returns>
</member>
</members>
</doc>
